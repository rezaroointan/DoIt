@page "/AddTask"

@using DoIt.Core.DTOs.Tasks
@using DoIt.Core.Interfaces
@using DoIt.Data.Entities.Users
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject IdentityUserAccessor UserAccessor
@inject UserManager<AppUser> UserManager
@inject ITaskService TaskService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@attribute [Authorize]

<PageTitle>Add Task</PageTitle>

<div class="container">

    <EditForm method="post" Model="ViewModel" OnValidSubmit="AddNewTask" FormName="newTask" Enhance>

        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Task -->
        <div class="form-floating mb-3">
            <InputText @bind-Value="ViewModel.Title" class="form-control" aria-required="true" placeholder="add a task" />
            <label for="task">Task</label>
            <ValidationMessage For="() => ViewModel.Title" class="text-danger" />
        </div>

        <!-- Duration -->
        <div class="form-floating mb-3">
            <InputDate @bind-Value="ViewModel.Duration" class="form-control" placeholder="date" />
            <label for="task">Duration</label>
            <ValidationMessage For="() => ViewModel.Duration" class="text-danger" />
        </div>

        <!-- Reminder -->
        <div class="form-floating mb-3">
            <input @bind-value="ViewModel.Reminder" type="time" class="form-control" placeholder="reminder" />
            <label for="task">Reminder</label>
            <ValidationMessage For="() => ViewModel.Duration" class="text-danger" />
        </div>

        <!-- Time Blocking -->
        <div class="row mb-3">
            <label class="form-label" for="customRange1">Time Block</label>
            <div class="input-group w-50">
                <span class="input-group-text">Hours</span>
                <InputNumber @bind-Value="ViewModel.TimeBlockHours" DisplayName="Hours" class="form-control" />
            </div>
            <div class="input-group w-50">
                <span class="input-group-text">Minutes</span>
                <InputNumber @bind-Value="ViewModel.TimeBlockMinutes" DisplayName="Minutes" class="form-control" />
            </div>
            <ValidationMessage For="() => ViewModel.TimeBlockHours" class="text-danger" />
            <ValidationMessage For="() => ViewModel.TimeBlockMinutes" class="text-danger" />
        </div>

        <!-- Description -->
        <div class="form-floating mb-3">
            <InputTextArea @bind-Value="ViewModel.Description" class="form-control" placeholder="description" />
            <label for="task">Description</label>
            <ValidationMessage For="() => ViewModel.Duration" class="text-danger" />
        </div>

        <!-- Buttons -->
        <div class="modal-footer">
            <a onclick="history.back();" class="btn btn-secondary">Back</a>
            <button type="submit" class="btn btn-primary">Add</button>
        </div>
    </EditForm>
</div>

@code {

    // Form view model
    [SupplyParameterFromForm]
    public AddTaskViewModel ViewModel { get; set; } = new();

    // Http context for get current user info
    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    // Return url for navigate to that
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get current user info
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        // Check duration default value is invalid
        if(ViewModel.Duration == DateOnly.FromDayNumber(0))
        {
            ViewModel.Duration = DateOnly.FromDateTime(DateTime.Now); // Set duration default value to today date
        }

        ViewModel.UserId = await UserManager.GetUserIdAsync(user); // Get UserId to current user id
    }

    public async Task AddNewTask()
    {
        // Add new task
        int result = await TaskService.AddTaskAsync(ViewModel);

        if (result != 0)
        {
            NavigationManager.NavigateTo(ReturnUrl);
        }
    }

    private async Task GoBackAsync()
    {
        await JSRuntime.InvokeVoidAsync("history.back()");
    }
}
